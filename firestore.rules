rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Function to check if user owns the document being created
    function isOwnerOnCreate() {
      return isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Function to check if user owns the existing document
    function isOwnerOnUpdate() {
      return isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Function to check if user is admin (with fallback for missing documents)
    function isAdminOrCanCreate() {
      return isAuthenticated() && (
        (exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.isActive == true) ||
        (!exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)))
      );
    }
    
    // Achievements collection rules
    match /achievements/{achievementId} {
      // Allow reading achievements owned by the current user or if user is admin
      // For admin, allow reading all achievements
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdminOrCanCreate());
      
      // Allow listing all achievements for admins (required for queries with orderBy)
      allow list: if isAdminOrCanCreate();
      
      // Allow creating achievements with the current user as owner
      allow create: if isOwnerOnCreate() && 
                   request.resource.data.keys().hasAll(['userId', 'participationType', 'topic', 'goal', 'date', 'status']) &&
                   request.resource.data.userId == request.auth.uid;
      
      // Allow updating achievements owned by the current user or if user is admin
      allow update: if (isOwnerOnUpdate() && 
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.userId == request.auth.uid) ||
                      isAdminOrCanCreate();
      
      // Allow deleting achievements owned by the current user or if user is admin
      allow delete: if isOwnerOnUpdate() || isAdminOrCanCreate();
    }
    
    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own profile data, admins can read all
      allow read: if isOwner(userId) || isAdminOrCanCreate();
      allow write: if isOwner(userId) || isAdminOrCanCreate();
      
      // Allow users to create their own profile
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Admin users collection rules
    match /admin_users/{userId} {
      // Allow reading admin status for authenticated users (to check their own status)
      allow read: if isAuthenticated();
      
      // Allow any authenticated user to create their own admin document
      // This is necessary for initial admin setup
      allow create: if isAuthenticated() && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['isActive']);
      
      // Allow admins to update admin documents, or users to update their own
      allow update: if isAuthenticated() && 
                   (request.auth.uid == userId || 
                    (exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.isActive == true));
      
      // Only allow admins to delete admin documents
      allow delete: if isAuthenticated() && 
                   exists(/databases/$(database)/documents/admin_users/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/admin_users/$(request.auth.uid)).data.isActive == true;
    }
    
    // Departments collection rules (read-only for all authenticated users)
    match /departments/{departmentId} {
      allow read: if isAuthenticated();
      
      // Only allow writes if user is admin
      allow write: if isAdminOrCanCreate();
    }
  }
}